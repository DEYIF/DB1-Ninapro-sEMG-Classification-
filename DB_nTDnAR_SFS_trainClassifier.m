function [trainedClassifier, validationAccuracy] = DB_nTDnAR_SFS_trainClassifier(trainingData)
%  84.4 % classification; 15obs/sec; 65278sec

% [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% returns a trained classifier and its accuracy. This code recreates the
% classification model trained in Classification Learner app. Use the
% generated code to automate training the same model with new data, or to
% learn how to programmatically train models.
%
%  Input:
%      trainingData: a table containing the same predictor and response
%       columns as imported into the app.
%
%  Output:
%      trainedClassifier: a struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
%
%      trainedClassifier.predictFcn: a function to make predictions on new
%       data.
%
%      validationAccuracy: a double containing the accuracy in percent. In
%       the app, the History list displays this overall accuracy score for
%       each model.
%
% Use the code to train the model with new data. To retrain your
% classifier, call the function from the command line with your original
% data or new data as the input argument trainingData.
%
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   yfit = trainedClassifier.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedClassifier.HowToPredict

% Auto-generated by MATLAB on 19-May-2019 12:38:13


% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'nAR1_ch2', 'nAR2_ch2', 'nAR1_ch3', 'nAR2_ch3', 'nAR1_ch4', 'nAR1_ch5', 'nAR7_ch5', 'nAR1_ch6', 'nAR2_ch6', 'nAR1_ch7', 'nAR1_ch8', 'nAR2_ch10', 'nAR7_ch10', 'nRMS_ch6', 'nWL_ch1', 'nWL_ch2', 'nWL_ch4', 'nWL_ch5', 'nWL_ch7', 'nWL_ch8', 'nWL_ch9', 'nWL_ch10'};
predictors = inputTable(:, predictorNames);
response = inputTable.data;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
template = templateSVM(...
    'KernelFunction', 'gaussian', ...
    'PolynomialOrder', [], ...
    'KernelScale', 'auto', ...
    'BoxConstraint', 4.8, ...
    'Standardize', true);
classificationSVM = fitcecoc(...
    predictors, ...
    response, ...
    'Learners', template, ...
    'Coding', 'onevsone', ...
    'ClassNames', {'Categ1'; 'Categ10'; 'Categ11'; 'Categ12'; 'Categ13'; 'Categ14'; 'Categ15'; 'Categ16'; 'Categ17'; 'Categ2'; 'Categ3'; 'Categ4'; 'Categ5'; 'Categ6'; 'Categ7'; 'Categ8'; 'Categ9'; 'Class1'; 'Class10'; 'Class11'; 'Class12'; 'Class13'; 'Class14'; 'Class15'; 'Class16'; 'Class17'; 'Class18'; 'Class19'; 'Class2'; 'Class20'; 'Class21'; 'Class22'; 'Class23'; 'Class3'; 'Class4'; 'Class5'; 'Class6'; 'Class7'; 'Class8'; 'Class9'; 'Label1'; 'Label10'; 'Label11'; 'Label12'; 'Label2'; 'Label3'; 'Label4'; 'Label5'; 'Label6'; 'Label7'; 'Label8'; 'Label9'});

% Create the result struct with predict function
predictorExtractionFcn = @(t) t(:, predictorNames);
svmPredictFcn = @(x) predict(classificationSVM, x);
trainedClassifier.predictFcn = @(x) svmPredictFcn(predictorExtractionFcn(x));

% Add additional fields to the result struct
trainedClassifier.RequiredVariables = {'nAR1_ch2', 'nAR2_ch2', 'nAR1_ch3', 'nAR2_ch3', 'nAR1_ch4', 'nAR1_ch5', 'nAR7_ch5', 'nAR1_ch6', 'nAR2_ch6', 'nAR1_ch7', 'nAR1_ch8', 'nAR2_ch10', 'nAR7_ch10', 'nRMS_ch6', 'nWL_ch1', 'nWL_ch2', 'nWL_ch4', 'nWL_ch5', 'nWL_ch7', 'nWL_ch8', 'nWL_ch9', 'nWL_ch10'};
trainedClassifier.ClassificationSVM = classificationSVM;
trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2018b.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'nAR1_ch2', 'nAR2_ch2', 'nAR1_ch3', 'nAR2_ch3', 'nAR1_ch4', 'nAR1_ch5', 'nAR7_ch5', 'nAR1_ch6', 'nAR2_ch6', 'nAR1_ch7', 'nAR1_ch8', 'nAR2_ch10', 'nAR7_ch10', 'nRMS_ch6', 'nWL_ch1', 'nWL_ch2', 'nWL_ch4', 'nWL_ch5', 'nWL_ch7', 'nWL_ch8', 'nWL_ch9', 'nWL_ch10'};
predictors = inputTable(:, predictorNames);
response = inputTable.data;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Perform cross-validation
partitionedModel = crossval(trainedClassifier.ClassificationSVM, 'KFold', 10);

% Compute validation predictions
[validationPredictions, validationScores] = kfoldPredict(partitionedModel)

% Compute validation accuracy
validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');
% Compute Confusion matrix
%cmat = confusionmat(validationPredictions, actuallabels );


